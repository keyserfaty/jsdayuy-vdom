{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/store.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_store","h","type","props","_len","arguments","children","Array","_key","isEventProp","prop","test","extractName","name","slice","toLowerCase","setProp","$el","value","setAttribute","setProps","Object","keys","forEach","setEvent","addEventListener","setEvents","createElement","node","document","createTextNode","map","child","childNode","appendChild","nodeChanged","node1","node2","_typeof","updateElement","$parent","newNode","oldNode","index","undefined","replaceChild","childNodes","newLength","oldLength","removeChild","initialState","text","reducer","state","action","_extends","payload","store","createStore","updateText","dispatch","target","element","className","onKeyUp","$root","querySelector","initialElement","getState","subscribe","nextElement","subscribers","console","log","handler","push","indexOf","splice"],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { createStore } from './store'\n\n// 1. Crear el árbol de elementos\n/**\n * { type: 'div', props: { className: 'danger' }, children: [] }\n * @param type\n * @param props\n * @param children\n */\nconst h = (type, props, ...children) => ({\n  type,\n  props,\n  children\n})\n\n// 2. Crear función que tranforma este elemento en DOM elements\nconst isEventProp = prop =>\n  /^on/.test(prop)\n\nconst extractName = name =>\n  name.slice(2).toLowerCase()\n\nconst setProp = ($el, name, value) => {\n  if (isEventProp(name)) {\n    return\n  } else if (name === 'className') {\n    $el.setAttribute('class', value)\n  } else {\n    $el.setAttribute(name, value)\n  }\n}\n\nconst setProps = ($el, props) => {\n  Object.keys(props)\n  .forEach(prop => setProp($el, prop, props[prop]))\n}\n\nconst setEvent = ($el, name, value) => {\n  $el.addEventListener(extractName(name), value)\n}\n\nconst setEvents = ($el, props) => {\n  Object.keys(props)\n    .forEach(prop => isEventProp(prop) ? setEvent($el, prop, props[prop]) : null)\n}\n\nconst createElement = node => {\n  if (typeof node === 'string') {\n    return document.createTextNode(node)\n  }\n\n  const $el = document.createElement(node.type)\n  setProps($el, node.props)\n  setEvents($el, node.props)\n\n  node.children\n    .map(child => createElement(child))\n    .forEach(childNode => $el.appendChild(childNode))\n\n  return $el\n}\n\n// 3. Manejar cambios en los nodos.\n\nconst nodeChanged = (node1, node2) =>\n  typeof node1 !== typeof node2 ||\n  typeof node1 === 'string' && node1 !== node2 ||\n  node1.type !== !node2.type\n\nconst updateElement = ($parent, newNode, oldNode, index = 0) => {\n  if (!oldNode) {\n    $parent.appendChild(createElement(newNode))\n  } else if (!newNode) {\n    $parent.removeChild($parent.childNodes[index])\n  } else if (nodeChanged(newNode, oldNode)) {\n    $parent.replaceChild(createElement(newNode), $parent.childNodes[index])\n  } else if (newNode.type) {\n    const newLength = newNode.children.length\n    const oldLength = oldNode.childNodes.length\n\n    for (let i = 0; i < newLength || i < oldLength; i++) {\n      updateElement($parent.childNodes[index], newNode.children[i], oldNode.children[i], i)\n    }\n  }\n}\n\n// 4. Agregar state para manejar cambios\nconst initialState = {\n  text: 'This text should change'\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'UPDATE_TEXT': {\n      return {\n        ...state,\n        text: action.payload.text\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst store = createStore(reducer)\n\nconst updateText = (e) => {\n  store.dispatch({ type: 'UPDATE_TEXT', payload: { text: e.target.value } })\n}\n\nconst element = props => (\n  h('div', { className: 'container' },\n    h('input', { type: 'text', onKeyUp: updateText }),\n    h('div', { className: 'text-container' }, props.text)\n  )\n)\n\n//** DOM\nconst $root = document.querySelector('#root')\n\nconst initialElement = element(store.getState())\nupdateElement($root, initialElement)\n\nstore.subscribe(() => {\n  const nextElement = element(store.getState())\n  updateElement($root, nextElement, initialElement)\n})\n","export const createStore = function createStoreFn (reducer) {\n  let state\n  const subscribers = []\n  const store = {\n    dispatch: action => {\n      state = reducer(state, action)\n      console.log(state, action)\n      subscribers.forEach(handler => handler())\n    },\n    getState: () => state,\n    subscribe: handler => {\n      subscribers.push(handler)\n      return () => {\n        const index = subscribers.indexOf(handler)\n        if (index > 0) {\n          subscribers.splice(index, 1)\n        }\n      }\n    }\n  }\n  store.dispatch({type: '@@redux/INIT'})\n  return store\n}"]}